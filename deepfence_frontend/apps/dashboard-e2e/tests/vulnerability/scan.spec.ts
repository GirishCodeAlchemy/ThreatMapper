import { test as base, expect, type Page } from '@playwright/test';
import { VulnerabilityPage } from './VulnerabilityPage';
import { TIMEOUT } from '../../playwright.config';

const test = base.extend<{ vulnerabilityPage: VulnerabilityPage }>({
  vulnerabilityPage: async ({ page, baseURL }, use) => {
    const vulnerabilityPage = new VulnerabilityPage(page);
    await vulnerabilityPage.goto(`${baseURL}/vulnerability/scans`);
    await use(vulnerabilityPage);
  },
});

test.describe('Vulnerability', () => {
  test('should scan for container image', async ({
    page,
    baseURL,
    vulnerabilityPage,
  }) => {
    const imageName = 'cloud-scanner';

    const image = page.getByText(imageName, {
      exact: false,
    });
    await image.waitFor({
      timeout: TIMEOUT,
    });
    const rowSelection = page.getByRole('row').filter({
      hasText: imageName,
    });

    await expect(rowSelection.getByText('container image')).toBeVisible();
    await rowSelection.getByRole('checkbox').click();
    const startBtn = page.getByRole('button', {
      name: 'Start Scan',
    });
    expect(startBtn).toBeEnabled();

    await startBtn.click();

    await page.getByRole('button', { name: 'Start Scan' }).click();

    await expect(page.getByTestId('sliding-modal-close-button')).not.toBeAttached();

    await page.mouse.click(0, 0);

    // refresh until it finished
    const interval = setInterval(async () => {
      const refreshBtn = page.locator(`button[title="Refresh now"]`);
      if (refreshBtn) {
        refreshBtn.click();
      }
    }, 30 * 1000);

    const cell = rowSelection.getByRole(`cell`).nth(5);

    const complete = cell.locator('tr > td:nth-child(7), td:has-text("Complete")');
    const completed = await complete.isVisible();
    if (completed) {
      clearInterval(interval);
    }

    await expect(cell).toHaveText('Complete', {
      timeout: TIMEOUT,
    });
  });
});
