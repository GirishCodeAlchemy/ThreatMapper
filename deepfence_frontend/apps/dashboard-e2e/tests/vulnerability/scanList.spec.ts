import { test as base, expect, type Page } from '@playwright/test';
import { VulnerabilityPage } from './VulnerabilityPage';

const test = base.extend<{ vulnerabilityPage: VulnerabilityPage }>({
  vulnerabilityPage: async ({ page, baseURL }, use) => {
    const vulnerabilityPage = new VulnerabilityPage(page);
    await vulnerabilityPage.goto(`${baseURL}/vulnerability/scans?nodeType=host`);
    await use(vulnerabilityPage);
  },
});

test.describe('Vulnerability', () => {
  test('should go to vulnerability list', async ({
    page,
    baseURL,
    vulnerabilityPage,
  }) => {
    const hosts = page.getByText('ui-automation-agent-setup');
    await hosts.waitFor({
      timeout: 30000,
    });
    const rowSelection = page.getByRole('row').filter({
      hasText: 'ui-automation-agent-setup',
    });
    const nameCell = rowSelection.getByRole(`cell`).nth(3);
    const statusCell = rowSelection.getByRole(`cell`).nth(5);

    const status = await statusCell.innerText();

    if (status.toString() === 'Complete') {
      const text = nameCell.getByText('ui-automation-agent-setup');
      expect(text).toBeEnabled();

      await text.click();

      await expect(page).toHaveURL(/.*scan-results/);
      const hostName = page.getByText('ui-automation-agent-setup');
      await hostName.waitFor({
        timeout: 30000,
      });
      expect(hostName).toBeVisible();
    }
  });
});
